---
layout: post
title: '의미있는 UI Testing 환경 구축기'
date: 2020-02-06 23:15:00 +09:00
categories: 'react,testing'
published: false
---

## 동기

프론트엔드에서 무언가를 테스팅하는 것은 참으로 어려운 일이다. 서버 사이드에 비해 기술적인 한계점도 많이 존재하지만, 동시에 어려운 점은 레퍼런스가 절대적으로 적다는 것이다. 물론, 오픈소스나 UI 라이브러리를 찾아보면 거의 모든 프로젝트들이 테스트 코드를 메인테이닝 하고 있다. 하지만 우리가 여기서 얘기하는 것은 오픈소스 프로젝트가 아니다. 실제 프로덕트로 나가는 코드에 추가하는 테스트 코드다.

솔직하게 밝히자면, UI Testing을 도입하기 위한 도전은 이번이 처음이 아니었다. 프론트엔드 개발자라면 누구나 최소 살면서 두 번 이상은 실패한다는 UI Testing 도입은 작성자 본인도 여러번의 실패와 시행착오를 거쳐왔다.

결론부터 말하자면 선정된 라이브러리들은 다음과 같다. 그러니 만약 글을 읽고 싶지는 않고, 대신 정보는 가져가고 싶다면, 아래 추천 라이브러리 목록을 설치한 다음 작성하기 시작하면 된다.

```
RosieJS - JS 객체 생성 팩토리 라이브러리
axios-mock-adapter
Jest
@testing-library/react
Faker
```

## 의미 부여하기

테스트 코드를 쓰는 것은 그것이 업무에 차지하는 비중이 적다고 하더라도 일부를 담당하게 된다. 결론적으로 테스트 코드를 작성할 때는 아래와 같은 요소들을 고려해야 한다.

1. 작성하는데 지나치게 많은 시간을 필요로 하지는 않는가?
2. 시간이 지나서 걸림돌이 되는 현상을 방지할 수 있는가?
3. 제품의 완성도에 긍정적인 영향력을 가질 수 있는가?

1, 2, 3번 모두 당연하지만 다소 놓치기 쉬운 항목들이라는 점을 발견할 수 있었다. UI 개발을 시작하면, 기존에 존재하던 테스트코드가 굉장히 필요 없고, 오히려 개발에 걸림돌이 되는 경우들이 있다. 분명 그 당시에는 프로덕션에 도움을 주기 위해 도입이 되었을텐데, 왜 그런 것일까?

결국 테스트도 코드의 일부다. 코드의 발전에

[](https://kentcdodds.com/blog/write-tests)

## Jest와 Testing Library를 통한 테스트 코드 작성

## RosieJS + Faker를 통해 API 결과값 생성하기

## axios-mock-adapter를 통해 API 호출 해결하기
