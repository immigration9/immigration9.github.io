---
layout: post
title: "Idiomatic Redux: Redux의 도(道) Part 1 - 도입과 의도"
date: 2021-07-23 01:00:00 +09:00
categories: "redux,react"
published: false
---

Idiomatic Redux 시리즈의 일부이며, 굉장히 예전(2017년 5월 9일)에 작성되었다.
Redux가 요구하는 바, Redux가 어떻게 사용되도록 의도되었으며, Redux를 사용했을 때 가능한 것이 무엇인지 설명하는 굉장히 좋은 글이라 생각하여,
원 저작자 Mark "acemarke" Erikson의 허락을 받고 번역을 해보았다.

## Intro

Redux는 코어에 있어 굉장히 간단한 패턴으로 구성되어 있다. 현재 값을 저장하고, 필요한 값을 업데이트하기 위해 단일 함수를 실행시키고, 구독자들에게 값이 변경되었다고 통보한다.
심플함에 불구하고 (혹은 그 심플함이 문제일 수도 있지만) Redux를 사용하는 방법에 있어 정말 다양한 접근법, 의견, 그리고 태도들이 있다.
그리고 굉장히 많은 접근법들이 도큐먼트에 명시된 컨셉이나 예제에서 많이 벗어나기도 한다.

동시에, Redux가 몇몇 방향을 "강요한다"는 점에 대해 불만을 표하는 일들이 있다. 이 중 다수는 Redux 라이브러리 자체가 가지고 있는 한계점 보단, Redux가 사용과 관련된 컨셉과 관련한 것들이 많다. (예를들어, 최근 HackerNews 아티클 하나에서 나는 Redux가 "너무 많은 보일러플레이트 코드를 요구한다", "action constant와 action creator는 필요하지 않다", "기능 추가를 위해 너무 많은 파일들을 수정해야한다", "작성 로직에 도달하기 위해 파일 스위칭을 왜이리 많이 해야하냐?", "배우기 위한 명칭들이 너무 어렵다" 등의 불만들을 찾을 수 있었다).

Redux가 사용되는 다양한 방법과 커뮤니티에서 공유되는 아이디어를 리서치하고 읽어보고, 토론해보며 나는 Redux가 실제로 동작하는 방법과, 컨셉상으로 Redux가 의도된 바와, Redux를 사용하는 거의 무한한 방법들을 구별할 필요가 있다는 결론을 내렸다. 전반적으로 이 글을 통해 왜 특정 Redux 사용 패턴과 용례가 존재하는지 설명하고, Redux의 철학과 의도를 설명하고, "관용적인"것과 "관용적이지 않은" Redux 사용법을 설명할 수 있길 바란다.

## 기초부터 쌓기

### 세 개의 원칙 살펴보기

지금은 굉장히 유명한 [Redux의 세 원칙](http://redux.js.org/docs/introduction/ThreePrinciples.html)을 살펴보자:

- 단일 소스 (Single source of truth): 애플리케이션 전체의 상태는 단일 소스 내의 객체 트리에 저장된다.
- 읽기 전용 상태 (State is read-only): 상태를 바꾸는 것은 '어떤 일이 발생하였는지'에 대해 설명하는 객체인 액션(action)을 통해서만 가능하다
- 순수 함수만을 이용하여 변경한다 (Changes are made with pure functions): 상태 트리가 액션을 통해 어떻게 바뀌는지 설명하기 위해 순수 리듀서(reducer)를 작성한다.

굉장히 현실적으로 보자면, 이 모든 원칙은 전부 다 거짓이다! (혹은 '제다이의 귀환'에서 )
