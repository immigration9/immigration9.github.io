---
layout: post
title: "UML 소개와 Class Diagrams"
date: 2021-06-10 20:00:00 +09:00
categories: "uml"
published: false
---

## Reference

[UML Distilled: A Brief Guide to the Standard Object Modeling Language by Martin Fowler](https://www.amazon.com/UML-Distilled-Standard-Modeling-Language/dp/0321193687)
[UML Class Diagram Tutorial](https://www.youtube.com/watch?v=UI6lqHOVHic)
[UML Class Diagrams](https://www.youtube.com/watch?v=BhEoV57nj0Q)
[UML Class and Object Diagrams](https://www.youtube.com/watch?v=sN2_CoB_kbw)

## Introduction

Unified Modeling Language(통합 모델링 언어, 이하 UML)은 객체 지향 스타일로 작성된 시스템을 개발할 때 설명과 디자인을 돕는 그래픽 표기법의 모음이다.
이 설명은 굉장히 간소화한 버전이라 할 수 있고, UML은 다양한 사람들에게 다양하게 사용된다. (이 부분에 대해서는 더 자세히 알아보고자 한다)

### UML을 사용하는 방법

Steve Mellor와 Martin Folwer는 사람들이 UML을 사용하는 방법을 세 가지: 스케치(Sketch), 청사진(Blueprint), 그리고 프로그래밍 언어(Programming language)로 정형화하였다.
이 셋 중 가장 많이 사용하는 방식은 (Martin Fowler의 관점에서 보았을 때) UML을 스케치로 사용하는 것이다. 이 사용법에서 개발자는 시스템의 몇몇 요소들에 대해 커뮤니케이션하는데 있어 UML을 사용한다.
청사진으로 사용하는 경우 포워드 엔지니어링(Forward Engineering)이나 리버스 엔지니어링(Reverse Engineering)의 과정으로 스케치를 사용할 수 있다. 여기서 포워드 엔지니어링은 코드를 작성하기 이전에 UML 다이어그램을 그리고, 리버스 엔지니어링의 경우 이해를 돕기 위해 기존의 코드를 기반으로 UML 다이어그램을 그린다.

스케칭 과정의 정수는 '선택'의 과정이다. 포워드 스케칭을 할 때 주로 팀원들과 논의를 하며 작성하고자 하는 코드의 개요를 작성한다. 목표는 스케치를 이용하여 하고자 하는 일의 아이디어와 대안에 대해 논의하는 것이다.
스케칭 자체는 동적이고 어느정도 프리스타일로 이뤄지기 때문에, 빠르게 협업하는 것이 중요하다. 스케치는 주로 화이트보드를 사용한다. 중점은 완성도가 아닌 커뮤니케이션 자체이다. 그렇기에 간단한 툴을 사용하고, UML의 규칙을 완벽히 지키려하지 않는다.

반대로, 청사진으로써의 UML은 완성도에 집중한다. 포워드 엔지니어링에서 청사진은 프로그래머가 코딩을 할 수 있게 디테일한 설계를 제공하는 디자이너에 의해 만들어진다. 해당 설계는 모든 디자인 결정들이 충분히 반영되어야 하고, 개발자가 많은 생각을 들이지 않고도 직관적으로 따라갈 수 있어야 한다. 여기서 디자이너는 해당 프로그래머와 같은 사람일 수도 있지만, 주로 해당 개발 팀의 시니어 개발자가 담당한다.

### 표기법과 메타모델

현재 UML은 표기법과 메타모델로 이루어져있다. 표기법은 모델에서 보이는 그래픽 항목들이고, 모델링 언어의 그래픽 문법이다.
예를들어, 클래스 다이어그램에서 표기법은 클래스, 관계, 다중성 등의 항목과 컨셉들이 어떻게 나타날지 정의한다.

## 클래스 다이어그램 (Class Diagram)

UML을 얘기할 때 대부분은 클래스 다이어그램이라 할 수 있다. 막말로, 누군가 갑자기 찾아와서 몰래 UML을 건넨다면, 높은 확률로 클래스 다이어그램일 가능성이 가장 높다.
클래스 다이어그램은 시스템 상에 있는 다양한 객체의 종류와 객체들 사이에 있는 다양한 정적 관계들을 나타낸다. 또한 클래스의 속성(properties)과 메소드(operations), 그리고 객체들의 연결에 적용되는 제약사항들을 보여준다.

![simple-class-diagram]({{ site.url }}/\_images/../../../\_images/2021-06-10-introduction-to-uml/simple-class-diagram-figure.png)

위 다이어그램에 있는 박스는 클래스를 의미하며, 세 개의 부분으로 나뉘어져있다. 클래스명, 속성(attributes), 그리고 메소드(operations). 이와 더불어 클래스 사이의 관계를 연결(associations)와 일반화(generalizations)를 통해 보여준다.

### 프로퍼티 (Properties)

프로퍼티는 클래스의 구조적 기능을 나타낸다. 예상해보자면 클래스의 필드에 해당한다는 것을 짐작할 수 있다. 프로퍼티 자체는 단일 개념이지만, 두 개의 서로 다른 표기법에서 등장한다: 속성(attributes)와 관계(associations).

### 속성(Attributes)으로 표기

속성은 클래스의 인스턴스가 가지고 있는 주요한 데이터의 부분을 나타낸다. 필드, 변수, 프로퍼티로도 불린다.

속성 표기는 클래스 박스 내부에 텍스트 한 줄로 표기된다. 여기서 필수인 항목은 이름만 해당되고, 그 이외에도 +(public) -(private) 로 공개 여부를 결정할 수 있으며, 다중성, 기본값 등 역시 표기될 수 있다.

### 관계(Associations)로 표기

프로퍼티는 관계를 통해서도 표기가 가능한다. 속성에서 볼 수 있는 대부분의 정보는 관계를 통해서도 볼 수 있다.

![properties-notation]({{ site.url }}/\_images/2021-06-10-introduction-to-uml/properties-notation.png)

관계는 두 개의 클래스 사이의 소스 클래스에서 대상 클래스로 방향성 있는 선으로 표기된다. 프로퍼티의 이름은 관계의 대상 끝 쪽에 다중성과 같이 표기된다.

### 다중성(Multiplicity)

프로퍼티의 다중성은 얼마나 많은 객체가 프로퍼티에 채워질 것인지 나타낸다. 예를들어 아래와 같은 숫자들로 표현된다.

- 1: 주문은 정확히 한 명의 손님을 갖는다
- 0..1: 기업 주문 고객은 영업대표를 갖고 있을 수도, 갖지 않을 수도 있다
- \*: 고객은 주문을 하지 않을 수도 있고, 주문 수에는 제한이 없다 (0~)

일반적으로, 다중성은 2..4와 같이 하한선(2)과 상한선(4)으로 표현된다. 하한선은 양수와 0일 수 있고, 상한선은 양수와 무제한을 뜻한은 \*를 갖는다. 동일할 경우, 혹은 한쪽을 포괄하는 경우 하나로 축약할 수 있다. 예를들어 1..1은 1로 표현이 가능하고, 0..\*은 \*로 표현이 가능하다. 다중성의 기본값은 1이며, 이 때는 생략이 가능하다.

추가로, 복수값을 갖는 경우, 복수형태로 이름을 짓는 것이 선호된다 (orders와 같이)

### 관계의 방향 (Directions)

단방향성 관계에서 아래와 같은 케이스를 살펴보자

Class A -----> Class B

이 경우, Class A는 Class B의 존재를 알고 있다.
반대로, Class B는 Class A의 존재를 알지 못한다.

예를들어, 주문(Order)과 제품(Product)의 관계를 살펴보자.

Order -----> Product

주문은 어떤 제품에 대한 주문인지를 알아야하지만, 반대로 제품은 어떤 주문이 본인을 가지고 있는지 알 필요가 없다.

동일한 경우로, 사람(Person)과 주소(Address)의 관계도 동일하다.

Person -----> Address

사람은 주소를 알아야 하지만, 반대로 주소는 어떤 사람이 어떤 주소를 갖고 있는지 알 필요가 없다. 이런 경우는 has-a 관계로 설명되기도 한다.

### 관계의 종류: Association, Aggregation, Composition

연관(Association): 위에 설명되어있다.

집합(Aggregation): 대상은 소유자의 부분으로 속하지만, 소유자가 없어진다고 구성하는 부분이 없어지지 않는 경우를 설명한다. 예를들어, 은행계좌는 고객에게 속하지만, 고객이 사라진다고 은행계좌는 없어지지 않고 남는다.

구성(Composition): 대상은 소유자의 부분으로 속한다. 예를들어, 부서는 회사의 일부이며, 회사가 없으면 부서도 존재하지 않는다. 집합과 유사하지만, 소유자 (여기서 회사)가 없어지면, 구성하는 부분도 없어지게 된다 (없어지지 않는 집합과 다른 양상을 보인다)

### 상속의 경우

상속의 경우, 상속 받는 쪽에서 관계가 시작한다.

### Event의 경우

has-a가 성립하지 않는다. 서로 방향이 없는 선만 그려진다.
